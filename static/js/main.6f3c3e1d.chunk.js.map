{"version":3,"sources":["Cell.js","Board.js","Controls.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","useState","pressTimer","setPressTimer","longPress","setLongPress","longPressDetected","handleMark","r","c","className","classes","state","bomb","count","getCellClass","onPointerDown","event","button","timerId","setTimeout","onPointerUp","clearTimeout","handleUncover","onContextMenu","preventDefault","Board","gridStyle","gridTemplateColumns","difficulty","columns","nMarked","setNMarked","nUncovered","setNUncovered","exploded","setExploded","res","row","rows","col","gridArray","setGridArray","validCoord","rndInt","min","max","Math","ceil","floor","random","countNeighbouringMines","grid","dr","dc","updateNMarked","newNMarked","useEffect","status","gridArrayTemp","gameLost","changeStatus","bombs","gameWon","flagCount","updateFlagCount","allowed","abs","push","i","j","length","sprinkleMines","floodFill","prev","style","width","height","key","createCellGrid","Controls","gameStatus","setGameStatus","secondsCount","setSecoundsCount","setTimerId","timerBadgeId","setTimerBadgeId","difficultyButtonId","setDifficultyButtonId","gameOverBadgeId","setGameOverBadgeId","changeDifficulty","newDifficulty","timer","setInterval","clearInterval","resetGame","Container","fluid","Row","Col","xs","md","align","id","DropdownButton","title","variant","DropdownItem","onSelect","eventKey","Badge","src","mins","secs","timeString","getTimerString","winOrLose","onClick","gameOverBadge","flags","App","setDifficulty","counter","setCounter","setFlagCount","level","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6f3c3e1d.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nfunction Cell(props) {\n    const STATE_HIDDEN = \"hidden\";\n    const STATE_SHOWN = \"shown\";\n    const STATE_MARKED = \"marked\";\n\n    const getCellClass = () => {\n        let classes = \"cell\";\n        if (props.state.state === STATE_MARKED){\n            classes += \" cell-flagged\";\n        }\n        else if (props.state.state === STATE_SHOWN){\n            if (props.state.bomb)\n                classes += \" cell-bomb\"\n            else\n                classes += \" cell-\" + props.state.count;\n        }\n        return classes;\n    }\n\n    const [pressTimer, setPressTimer] = useState();\n    const [longPress, setLongPress] = useState(false);\n\n    const checkLongPress = (event) => {\n        if(event.button === 0) {\n            let timerId = setTimeout(longPressDetected, 500);\n            setPressTimer(timerId);\n        }\n    }\n\n    const longPressDetected = () => {\n        props.handleMark(props.r, props.c);\n        setLongPress(true);\n    }\n\n    const stopPress = (event) => {\n        if(event.button === 0) {\n            clearTimeout(pressTimer);\n            if (longPress) {\n                setLongPress(false);\n            } else {\n                props.handleUncover(props.r, props.c)\n            }\n        }\n    }\n\n    const rightClick = (event) => {\n        event.preventDefault();\n        if(event.button === 2) {\n            props.handleMark(props.r, props.c);\n        }\n    }\n\n    return(\n        <div className={getCellClass()} onPointerDown={checkLongPress} onPointerUp={stopPress} onContextMenu={rightClick}>\n        </div>\n    );\n}\n\nexport default Cell;\n","import React, {useEffect, useState} from \"react\";\nimport Cell from \"./Cell\";\n\nfunction Board(props) {\n    const gridStyle = {gridTemplateColumns: 'repeat(' + props.difficulty.columns + ', 1fr)'}\n\n    const STATE_HIDDEN = \"hidden\";\n    const STATE_SHOWN = \"shown\";\n    const STATE_MARKED = \"marked\";\n\n    const initializeGrid = () => {\n        let res = [];\n        for (let row = 0; row < props.difficulty.rows; row++){\n            res[row] = [];\n            for (let col = 0; col < props.difficulty.columns; col++){\n                res[row][col] = {bomb: false, state: STATE_HIDDEN, count: 0};\n            }\n        }\n        return res;\n    }\n\n    const [nMarked, setNMarked] = useState(0);\n    const [nUncovered, setNUncovered] = useState(0);\n    const [exploded, setExploded] = useState(false);\n    const [gridArray, setGridArray] = useState(initializeGrid);\n\n    const validCoord = (row, col) => {\n        return row >= 0 && row < props.difficulty.rows && col >= 0 && col < props.difficulty.columns;\n    }\n\n    const rndInt = (min, max) => {\n        [min,max] = [Math.ceil(min), Math.floor(max)]\n        return min + Math.floor(Math.random() * (max - min + 1));\n    }\n\n    const countNeighbouringMines = (row,col, grid) => {\n        const c = (r,c) =>\n            (validCoord(r,c) && grid[r][c].bomb ? 1 : 0);\n        let res = 0;\n        for( let dr = -1 ; dr <= 1 ; dr ++ )\n            for( let dc = -1 ; dc <= 1 ; dc ++ )\n                res += c(row+dr,col+dc);\n        return res;\n    }\n\n    const sprinkleMines = (row, col) => {\n        let allowed = [];\n        for(let r = 0 ; r < props.difficulty.rows ; r++ ) {\n            for( let c = 0 ; c < props.difficulty.columns ; c++ ) {\n                if(Math.abs(row-r) > 2 || Math.abs(col-c) > 2)\n                    allowed.push([r,c]);\n            }\n        }\n\n        let gridArrayTemp = gridArray;\n\n        for( let i = 0 ; i < props.difficulty.bombs ; i++ ) {\n            let j = rndInt(i, allowed.length-1);\n            [allowed[i], allowed[j]] = [allowed[j], allowed[i]];\n            let [r,c] = allowed[i];\n            gridArrayTemp[r][c].bomb = true;\n        }\n\n        // erase any marks (in case user placed them) and update counts\n        for(let r = 0 ; r < props.difficulty.rows ; r ++ ) {\n            for( let c = 0 ; c < props.difficulty.columns ; c ++ ) {\n                if(gridArrayTemp[r][c].state === STATE_MARKED)\n                    gridArrayTemp[r][c].state = STATE_HIDDEN;\n                gridArrayTemp[r][c].count = countNeighbouringMines(r,c, gridArrayTemp);\n            }\n        }\n\n        setGridArray(gridArrayTemp);\n    }\n\n    const floodFill = (r,c, grid) => {\n        if(!validCoord(r,c)) return;\n        if(grid[r][c].state !== STATE_HIDDEN) return;\n        grid[r][c].state = STATE_SHOWN;\n        setNUncovered((prev) => prev + 1);\n        if( grid[r][c].count !== 0) return;\n        floodFill(r-1,c-1, grid);floodFill(r-1,c, grid);floodFill(r-1,c+1, grid);\n        floodFill(r,c-1, grid);                           ;floodFill(r,c+1, grid);\n        floodFill(r+1,c-1, grid);floodFill(r+1,c, grid);floodFill(r+1,c+1, grid);\n    };\n\n    const updateNMarked = () => {\n        let newNMarked = 0;\n        for(let r = 0 ; r < props.difficulty.rows ; r ++ ) {\n            for( let c = 0 ; c < props.difficulty.columns ; c ++ ) {\n                if(gridArray[r][c].state === STATE_MARKED)\n                    newNMarked += 1;\n            }\n        }\n        setNMarked(newNMarked);\n    }\n\n    const gameLost = () => {\n        let gridArrayTemp = gridArray;\n        for(let r = 0 ; r < props.difficulty.rows ; r ++ ) {\n            for( let c = 0 ; c < props.difficulty.columns ; c ++ ) {\n                if(gridArrayTemp[r][c].bomb && gridArrayTemp[r][c].state === STATE_HIDDEN)\n                    gridArrayTemp[r][c].state = STATE_SHOWN;\n            }\n        }\n        setGridArray(gridArrayTemp);\n    }\n\n    const gameWon = () => {\n        let gridArrayTemp = gridArray;\n        for(let r = 0 ; r < props.difficulty.rows ; r ++ ) {\n            for( let c = 0 ; c < props.difficulty.columns ; c ++ ) {\n                if(gridArrayTemp[r][c].bomb && gridArrayTemp[r][c].state === STATE_HIDDEN)\n                    gridArrayTemp[r][c].state = STATE_MARKED;\n            }\n        }\n        setGridArray(gridArrayTemp);\n        updateNMarked();\n    }\n\n    const checkGameStatus = () => {\n        if(props.status === \"inProgress\"){\n            if(exploded){\n                gameLost();\n                props.changeStatus(\"lost\");\n            }\n            else if (nUncovered === (props.difficulty.rows * props.difficulty.columns - props.difficulty.bombs)){\n                gameWon();\n                props.changeStatus(\"won\");\n            }\n        }\n    }\n\n    useEffect(checkGameStatus);\n\n    useEffect(() => {\n        const flagCount = props.difficulty.bombs - nMarked;\n        props.updateFlagCount(flagCount);\n    }, [nMarked]);\n\n    const handleUncover = (row, col) => {\n        if (props.status === \"won\" || props.status === \"lost\") return;\n        if (!validCoord(row,col)) return;\n        if (props.status === \"new\"){\n            sprinkleMines(row, col);\n            props.changeStatus(\"inProgress\");\n        }\n        if(gridArray[row][col].state !== STATE_HIDDEN) return;\n        let gridArrayTemp = gridArray;\n        floodFill(row,col, gridArrayTemp);\n        setGridArray(gridArrayTemp);\n\n        if(gridArray[row][col].bomb) {\n            setExploded(true);\n        }\n    }\n\n    const handleMark = (row, col) => {\n        if (props.status === \"won\" || props.status === \"lost\") return;\n        // if coordinates invalid, refuse this request\n        if( !validCoord(row,col)) return;\n        // if cell already uncovered, refuse this\n        if( gridArray[row][col].state === STATE_SHOWN) return;\n        // accept the move and flip the marked status\n        let gridArrayTemp = gridArray;\n        gridArrayTemp[row][col].state = gridArrayTemp[row][col].state === STATE_MARKED ?\n            STATE_HIDDEN : STATE_MARKED;\n        setGridArray(gridArrayTemp);\n        updateNMarked();\n    }\n\n    const createCellGrid = (width, height) => {\n        let grid = [];\n        for (let row = 0; row < height; row++){\n            for (let col = 0; col < width; col++){\n                grid.push(<Cell key={row * width + col} r={row} c={col} state={gridArray[row][col]} handleUncover={handleUncover} handleMark={handleMark}></Cell>)\n            }\n        }\n        return grid;\n    }\n\n    return(\n        <div className=\"grid\" style={gridStyle}>\n            {createCellGrid(props.difficulty.columns, props.difficulty.rows)}\n        </div>\n    );\n}\n\nexport default Board;\n","import React, {useEffect, useState} from \"react\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport DropdownItem from \"react-bootstrap/DropdownItem\";\nimport {Badge, Col, Container, Row} from \"react-bootstrap\";\n\nfunction Controls(props) {\n    const [gameStatus, setGameStatus] = useState(props.status);\n    const [secondsCount, setSecoundsCount] = useState(0);\n    const [timerId, setTimerId] = useState();\n    const [timerBadgeId, setTimerBadgeId] = useState(\"timerBadge\");\n    const [difficultyButtonId, setDifficultyButtonId] = useState(\"difficultyButton\");\n    const [gameOverBadgeId, setGameOverBadgeId] = useState(\"gameOverBadge\");\n\n    const changeDifficulty = (newDifficulty) => {\n        props.changeDifficulty(newDifficulty);\n    }\n\n    useEffect(() => {\n        if (gameStatus === \"new\" && props.status === \"inProgress\"){\n            const timer = setInterval(() => setSecoundsCount((prev) => prev + 1), 1000);\n            setTimerId(timer);\n            setGameStatus(props.status);\n        } else if (gameStatus === \"inProgress\" && props.status === \"won\"){\n            clearInterval(timerId);\n            setTimerBadgeId(\"timerBadge-won\");\n            setDifficultyButtonId(\"difficultyButton-won\");\n            setGameOverBadgeId(\"gameOverBadge-won\");\n            setGameStatus(props.status);\n        } else if (gameStatus === \"inProgress\" && props.status === \"lost\"){\n            clearInterval(timerId);\n            setTimerBadgeId(\"timerBadge-lost\");\n            setDifficultyButtonId(\"difficultyButton-lost\");\n            setGameOverBadgeId(\"gameOverBadge-lost\");\n            setGameStatus(props.status);\n        } else if (props.status === \"new\"){\n            clearInterval(timerId);\n            setTimerBadgeId(\"timerBadge\");\n            setDifficultyButtonId(\"difficultyButton\");\n            setSecoundsCount(0);\n            setGameStatus(props.status);\n        }\n    },[props.status]);\n\n    const flagsBadge = () => {\n        return (\n            <Badge variant=\"light\" id=\"flagsBadge\">\n                <img src='/minesweeper/flag_hollow.png' className=\"badgeIcon\"/>\n                <span id=\"flagCount\">{props.flags}</span>\n            </Badge>\n        );\n    }\n\n    const resetGame = () => {\n        props.changeDifficulty(props.difficulty);\n    }\n\n    const gameOverBadge = () => {\n        const winOrLose = props.status === \"won\" ? \"Win\" : \"Lose\";\n        return(\n            <Badge variant=\"light\" id={gameOverBadgeId}>\n                <span id=\"gameEndMessage\">You {winOrLose}!</span>\n                <img id='resetButton' src='/minesweeper/reset.png' className=\"badgeIcon\" onClick={resetGame}/>\n            </Badge>\n        );\n    }\n\n    const getTimerString = () => {\n        const mins = Math.floor(secondsCount/60);\n        const secs = secondsCount % 60;\n        let timeString = \"\";\n        mins >= 10 ? timeString += mins : timeString += \"0\" + mins;\n        timeString += \":\";\n        secs >= 10 ? timeString += secs : timeString += \"0\" + secs;\n        return timeString;\n    }\n\n    const timerBadge = () => {\n        return (\n            <Badge variant=\"light\" id={timerBadgeId}>\n                <img src='/minesweeper/stopwatch.png' height='20px' className=\"badgeIcon\"/>\n                <span id=\"timerDisplay\">{getTimerString()}</span>\n            </Badge>\n\n        );\n    }\n\n    return(\n        <div className=\"control-panel\">\n            <Container fluid={true}>\n                <Row>\n                    <Col xs={4} md={4} align=\"center\" id=\"difficultyCol\">\n                        <DropdownButton title=\"Difficulty\" variant=\"light\" id={difficultyButtonId}>\n                            <DropdownItem onSelect={changeDifficulty} eventKey=\"easy\">Easy</DropdownItem>\n                            <DropdownItem onSelect={changeDifficulty} eventKey=\"medium\">Medium</DropdownItem>\n                            <DropdownItem onSelect={changeDifficulty} eventKey=\"hard\">Hard</DropdownItem>\n                        </DropdownButton>\n                    </Col>\n                    <Col xs={4} md={4} align=\"center\">\n                        {timerBadge()}\n                    </Col>\n                    <Col xs={4} md={4} align=\"center\">\n                        {(gameStatus === \"won\" || gameStatus === \"lost\") && gameOverBadge()}\n                        {(gameStatus === \"new\" || gameStatus === \"inProgress\") && flagsBadge()}\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default Controls;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Board from \"./Board\";\nimport Controls from \"./Controls\";\n\n\nfunction App() {\n    const [difficulty, setDifficulty] = useState({\n        'level' : 'easy',\n        'columns' : 10,\n        'rows' : 8,\n        'bombs' : 10\n    });\n    const [counter, setCounter] = useState(0);\n    const [gameStatus, setGameStatus] = useState(\"new\");\n    const [flagCount, setFlagCount] = useState(difficulty.bombs);\n\n    useEffect(() => {\n        setFlagCount(difficulty.bombs);\n    }, [difficulty]);\n\n    const changeDifficulty = (newDifficulty) => {\n        setCounter((prev) => prev + 1);\n        setGameStatus(\"new\");\n        if (newDifficulty === \"easy\"){\n            setDifficulty({\n                'level' : 'easy',\n                'columns' : 10,\n                'rows' : 8,\n                'bombs' : 10\n            });\n        } else if (newDifficulty === \"medium\"){\n            setDifficulty({\n                'level' : 'medium',\n                'columns' : 18,\n                'rows' : 12,\n                'bombs' : 40\n            });\n        }\n        else {\n            setDifficulty({\n                'level' : 'hard',\n                'columns' : 24,\n                'rows' : 20,\n                'bombs' : 99\n            });\n        }\n    }\n\n    return (\n        <div className=\"wrapper\">\n            <div className=\"game-container\">\n                <Controls difficulty={difficulty.level} changeDifficulty={changeDifficulty} flags={flagCount} status={gameStatus}></Controls>\n                <Board key={counter} difficulty={difficulty} changeStatus={setGameStatus} status={gameStatus} updateFlagCount={setFlagCount}></Board>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}